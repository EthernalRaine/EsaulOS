import os
from SCons.Environment import Environment
from tools.utility import FindIndex, IsFileName

Import("targetenv") #type:ignore
targetenv : Environment

buildenv = targetenv.Clone()
buildenv.Append(
    CPPPATH = [ 
        buildenv.Dir('.').srcnode(),
        buildenv['PROJECTDIR'].Dir('src/base/sdk')
    ],
    LINKFLAGS = [
        '-T', buildenv.File('linker.ld').srcnode().path,
    ]
)

esos_sources = [
    'klibc/debug/klog.c',
    'klibc/debug/kprintf.c',
    'klibc/debug/kputs.c',
    'klibc/io/inx.c',
    'klibc/io/outx.c',
    'klibc/io/wait.c',
    'klibc/terminal/cursor.c',
    'klibc/terminal/tty.c',
    'klibc/terminal/vga.c',
    'klibc/panic.c',
    'osbuild.c',
    'ekernel.c'
]

if targetenv['arch'] == 'ia32':
    esos_sources.append('ia32/entry.asm')
    #esos_sources.append('ia32/crti.asm')
    #esos_sources.append('ia32/crtn.asm')

esos_objects = buildenv.Object(esos_sources)
entry_object = esos_objects.pop(FindIndex(esos_objects, lambda item: IsFileName(item, 'entry.o')))
#crti_object = esos_objects.pop(FindIndex(esos_objects, lambda item: IsFileName(item, 'crti.o')))
#crtn_object = esos_objects.pop(FindIndex(esos_objects, lambda item: IsFileName(item, 'crtn.o')))

Import('libc')  #type:ignore
static_libs = [
    libc        #type:ignore
]

esos_objects = [
    entry_object,
    #crti_object,
    #os.path.join(buildenv['LIBGCC_TOOLCHAIN'], 'crtbegin.o'),
    *esos_objects,
    *static_libs,
    #os.path.join(buildenv['LIBGCC_TOOLCHAIN'], 'crtend.o'),
    #crtn_object  
]

kernel = buildenv.Program('chkernel.elf', esos_objects)
kernel_stripped = buildenv.Command('ekernel.elf', kernel, '$STRIP -o $TARGET $SOURCE')

if targetenv['config'] == 'fre':
    buildenv.Default(kernel_stripped)
else:
    buildenv.Default(kernel)

Export('kernel')            #type:ignore
Export('kernel_stripped')   #type:ignore